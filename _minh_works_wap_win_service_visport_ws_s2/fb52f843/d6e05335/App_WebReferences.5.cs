//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace S2VNM {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="S2VnmSoap", Namespace="http://tempuri.org/")]
    public partial class S2Vnm : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RegisterServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SyncSubWapVnmDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegisteredServicesOperationCompleted;
        
        /// <remarks/>
        public S2Vnm() {
            string urlSetting = System.Configuration.ConfigurationManager.AppSettings["S2VNM.S2Vnm"];
            if ((urlSetting != null)) {
                this.Url = urlSetting;
            }
            else {
                this.Url = "http://123.29.67.36:9005/S2Vnm.asmx";
            }
        }
        
        /// <remarks/>
        public event RegisterServiceCompletedEventHandler RegisterServiceCompleted;
        
        /// <remarks/>
        public event SyncSubWapVnmDataCompletedEventHandler SyncSubWapVnmDataCompleted;
        
        /// <remarks/>
        public event CheckRegistrationCompletedEventHandler CheckRegistrationCompleted;
        
        /// <remarks/>
        public event GetRegisteredServicesCompletedEventHandler GetRegisteredServicesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterService(string Shortcode, string RequestID, string Msisdn, string Commandcode, string Message) {
            object[] results = this.Invoke("RegisterService", new object[] {
                        Shortcode,
                        RequestID,
                        Msisdn,
                        Commandcode,
                        Message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegisterService(string Shortcode, string RequestID, string Msisdn, string Commandcode, string Message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterService", new object[] {
                        Shortcode,
                        RequestID,
                        Msisdn,
                        Commandcode,
                        Message}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRegisterService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterServiceAsync(string Shortcode, string RequestID, string Msisdn, string Commandcode, string Message) {
            this.RegisterServiceAsync(Shortcode, RequestID, Msisdn, Commandcode, Message, null);
        }
        
        /// <remarks/>
        public void RegisterServiceAsync(string Shortcode, string RequestID, string Msisdn, string Commandcode, string Message, object userState) {
            if ((this.RegisterServiceOperationCompleted == null)) {
                this.RegisterServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterServiceOperationCompleted);
            }
            this.InvokeAsync("RegisterService", new object[] {
                        Shortcode,
                        RequestID,
                        Msisdn,
                        Commandcode,
                        Message}, this.RegisterServiceOperationCompleted, userState);
        }
        
        private void OnRegisterServiceOperationCompleted(object arg) {
            if ((this.RegisterServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterServiceCompleted(this, new RegisterServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncSubWapVnmData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SyncSubWapVnmData(string Shortcode, string RequestID, string Msisdn, string Commandcode, string Message) {
            object[] results = this.Invoke("SyncSubWapVnmData", new object[] {
                        Shortcode,
                        RequestID,
                        Msisdn,
                        Commandcode,
                        Message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSyncSubWapVnmData(string Shortcode, string RequestID, string Msisdn, string Commandcode, string Message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SyncSubWapVnmData", new object[] {
                        Shortcode,
                        RequestID,
                        Msisdn,
                        Commandcode,
                        Message}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSyncSubWapVnmData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SyncSubWapVnmDataAsync(string Shortcode, string RequestID, string Msisdn, string Commandcode, string Message) {
            this.SyncSubWapVnmDataAsync(Shortcode, RequestID, Msisdn, Commandcode, Message, null);
        }
        
        /// <remarks/>
        public void SyncSubWapVnmDataAsync(string Shortcode, string RequestID, string Msisdn, string Commandcode, string Message, object userState) {
            if ((this.SyncSubWapVnmDataOperationCompleted == null)) {
                this.SyncSubWapVnmDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSyncSubWapVnmDataOperationCompleted);
            }
            this.InvokeAsync("SyncSubWapVnmData", new object[] {
                        Shortcode,
                        RequestID,
                        Msisdn,
                        Commandcode,
                        Message}, this.SyncSubWapVnmDataOperationCompleted, userState);
        }
        
        private void OnSyncSubWapVnmDataOperationCompleted(object arg) {
            if ((this.SyncSubWapVnmDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SyncSubWapVnmDataCompleted(this, new SyncSubWapVnmDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRegistration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckRegistration(string Shortcode, string RequestID, string Msisdn, string Commandcode, string Message) {
            object[] results = this.Invoke("CheckRegistration", new object[] {
                        Shortcode,
                        RequestID,
                        Msisdn,
                        Commandcode,
                        Message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckRegistration(string Shortcode, string RequestID, string Msisdn, string Commandcode, string Message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckRegistration", new object[] {
                        Shortcode,
                        RequestID,
                        Msisdn,
                        Commandcode,
                        Message}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckRegistration(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRegistrationAsync(string Shortcode, string RequestID, string Msisdn, string Commandcode, string Message) {
            this.CheckRegistrationAsync(Shortcode, RequestID, Msisdn, Commandcode, Message, null);
        }
        
        /// <remarks/>
        public void CheckRegistrationAsync(string Shortcode, string RequestID, string Msisdn, string Commandcode, string Message, object userState) {
            if ((this.CheckRegistrationOperationCompleted == null)) {
                this.CheckRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRegistrationOperationCompleted);
            }
            this.InvokeAsync("CheckRegistration", new object[] {
                        Shortcode,
                        RequestID,
                        Msisdn,
                        Commandcode,
                        Message}, this.CheckRegistrationOperationCompleted, userState);
        }
        
        private void OnCheckRegistrationOperationCompleted(object arg) {
            if ((this.CheckRegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRegistrationCompleted(this, new CheckRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRegisteredServices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetRegisteredServices(string Msisdn) {
            object[] results = this.Invoke("GetRegisteredServices", new object[] {
                        Msisdn});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRegisteredServices(string Msisdn, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRegisteredServices", new object[] {
                        Msisdn}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetRegisteredServices(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRegisteredServicesAsync(string Msisdn) {
            this.GetRegisteredServicesAsync(Msisdn, null);
        }
        
        /// <remarks/>
        public void GetRegisteredServicesAsync(string Msisdn, object userState) {
            if ((this.GetRegisteredServicesOperationCompleted == null)) {
                this.GetRegisteredServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegisteredServicesOperationCompleted);
            }
            this.InvokeAsync("GetRegisteredServices", new object[] {
                        Msisdn}, this.GetRegisteredServicesOperationCompleted, userState);
        }
        
        private void OnGetRegisteredServicesOperationCompleted(object arg) {
            if ((this.GetRegisteredServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegisteredServicesCompleted(this, new GetRegisteredServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RegisterServiceCompletedEventHandler(object sender, RegisterServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SyncSubWapVnmDataCompletedEventHandler(object sender, SyncSubWapVnmDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SyncSubWapVnmDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SyncSubWapVnmDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckRegistrationCompletedEventHandler(object sender, CheckRegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetRegisteredServicesCompletedEventHandler(object sender, GetRegisteredServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegisteredServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegisteredServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}
